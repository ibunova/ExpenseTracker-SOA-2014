//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExpenseTracker.Desktop.ExpenseServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Expense", Namespace="http://schemas.datacontract.org/2004/07/ExpenseTracker.Models")]
    [System.SerializableAttribute()]
    public partial class Expense : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExpenseTracker.Desktop.ExpenseServiceReference.Currency CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExpenseTracker.Desktop.ExpenseServiceReference.Currency Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((this.CurrencyField.Equals(value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Currency", Namespace="http://schemas.datacontract.org/2004/07/ExpenseTracker.Models")]
    public enum Currency : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BGN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EUR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        USD = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExpenseServiceReference.IExpenseService")]
    public interface IExpenseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/SaveExpense", ReplyAction="http://tempuri.org/IExpenseService/SaveExpenseResponse")]
        int SaveExpense(ExpenseTracker.Desktop.ExpenseServiceReference.Expense expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/SaveExpense", ReplyAction="http://tempuri.org/IExpenseService/SaveExpenseResponse")]
        System.Threading.Tasks.Task<int> SaveExpenseAsync(ExpenseTracker.Desktop.ExpenseServiceReference.Expense expense);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/GetExpensesByDate", ReplyAction="http://tempuri.org/IExpenseService/GetExpensesByDateResponse")]
        System.Collections.Generic.List<ExpenseTracker.Desktop.ExpenseServiceReference.Expense> GetExpensesByDate(System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/GetExpensesByDate", ReplyAction="http://tempuri.org/IExpenseService/GetExpensesByDateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExpenseTracker.Desktop.ExpenseServiceReference.Expense>> GetExpensesByDateAsync(System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/GetCurrentDate", ReplyAction="http://tempuri.org/IExpenseService/GetCurrentDateResponse")]
        System.DateTime GetCurrentDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExpenseService/GetCurrentDate", ReplyAction="http://tempuri.org/IExpenseService/GetCurrentDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetCurrentDateAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExpenseServiceChannel : ExpenseTracker.Desktop.ExpenseServiceReference.IExpenseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExpenseServiceClient : System.ServiceModel.ClientBase<ExpenseTracker.Desktop.ExpenseServiceReference.IExpenseService>, ExpenseTracker.Desktop.ExpenseServiceReference.IExpenseService {
        
        public ExpenseServiceClient() {
        }
        
        public ExpenseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExpenseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExpenseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExpenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SaveExpense(ExpenseTracker.Desktop.ExpenseServiceReference.Expense expense) {
            return base.Channel.SaveExpense(expense);
        }
        
        public System.Threading.Tasks.Task<int> SaveExpenseAsync(ExpenseTracker.Desktop.ExpenseServiceReference.Expense expense) {
            return base.Channel.SaveExpenseAsync(expense);
        }
        
        public System.Collections.Generic.List<ExpenseTracker.Desktop.ExpenseServiceReference.Expense> GetExpensesByDate(System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetExpensesByDate(fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExpenseTracker.Desktop.ExpenseServiceReference.Expense>> GetExpensesByDateAsync(System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetExpensesByDateAsync(fromDate, toDate);
        }
        
        public System.DateTime GetCurrentDate() {
            return base.Channel.GetCurrentDate();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetCurrentDateAsync() {
            return base.Channel.GetCurrentDateAsync();
        }
    }
}
